FIRST, SOME TIPS TO REMEMBER:
	-The ADC saturates at -3dBm
	-The clock of the ADC is given by the Valon. The sampling frequency of the ADC is the 
	 double of the frequency at the Valon (The ADC samples at rising and falling edge)
	-The fpga clock is the sampling frequency divided by 16.
		So , for example: 
			if the valon frequency is set to 1080MHz, the sampling frequenc
	
	
	-The data given by the powerPC (PPC) is big endian (>)
	-The magnitude data (like powA, 1_A2) has type unsigned longlong (in struct Q)
	-The phase parameter (re, im) has type signed long long (in struct q)
	-The time values (seconds and fractions of seconds) has type unsigned integer (I)
	-There are some brams that save two values in one address, so you have to separate them
	 and reinterpret correcty.
			eg: phase is composed by 8 bytes of real part and 8 part of imaginary part in
				each address.
				So to read 100 values and reinterpret them, youre code should look like:
					phase_val=struct.unpack('>'+str(100*2)+'q', fpga.read('phase', 100*8*2))
					real_part = phase_val[::2]
					imag_part = phase_val[1::2]

			eg2: For the time values is the same, there are 4 bytes of seconds and
			4 bytes for the fractions of seconds. So to read 100 values:
    			time_val = struct.unpack('>'+str(2*100)+'I', fpga.read('time', 100*4))
				seconds = time_val[::2]
				frac_seconds = time_val[1::2]


here we have a short description of each one of the files:

    -calan_vv:          contains the main class that calls the other scripts,
                        it contains several function to make the life more easy
                        (some other are still in test and has to be debbugged 
                        but this is the structure that has to have the final
                        code) ----> eg: the gui is still missing but it should have
                        the same options.
 
    -plot_snapshot:     plot an animation of the inputs of the ADC without any
                        processing. It is usefull to look if the voltage levels
                        stays in the suitable range

    -plots:             Draw several types of plots reading at real time (at the
                        network speed), eg spectrum at ADC0, spectrum at ADC1, 
                        instantaneus phase, channel difference of powers, etc

    -meas:              Class intended to make measurements at lab. We control
                        two generators using visa and save the data with ROACH.
                        And then calculate the correspondent statistics.

    -generator:         Class to interface easily with the generators using visa
    -visa_generator:    Function called by generator
    -anritsu_generator: Function called by generator

    -adc_clock:         Modify the Valon frequency and the reference, called by
                        calan_vv
    -ppc_save:          Contains the compilated code for the PowerPc inside 
                        the ROACH. Its intended to save the data in the 
                        microcontroller. 






The ROACH models has the following registers wich you could communicate by using calan_vv.fpga and it methods (eg:write_int, read_int, read, etc)
In the ROACH workflow the registers has only one direction ie input(I) or output(O):

(There are a lot of them... i am going to completely fill this when i have time)

-1st memory bank for the holography measure:
 '0save_A'               : (O)save ADC0 magnitude at one channel, reading by PPC  					(size = 8192*8 bytes)
 '0save_B'              : (O)save ADC1 magnitude at one channel, reading by PPC   					(size = 8192*8 bytes)
 '0save_phase',         : (O)save the the correlation (re, im) at one channel, reading by PPC 		(size= 16384*8 bytes )
 '0save_time',          : (O) save the time of one measurement (secs, frac_sec), reading by PPC    	(size= 8192*8 bytes)

-2nd memory bank for the holography measure;
 '1save_A',             : (O) save ADC0 magnitude at one channel, reading by PPC  					(size = 8192*8 bytes) 
 '1save_B',             : (O) save ADC1 magnitude at one channel, reading by PPC  					(size = 8192*8 bytes)
 '1save_phase',         : (O) save the the correlation (re, im) at one channel, reading by PPC 		(size = 16384*8 bytes)
 '1save_time',          : (O) save the time of one measurement (secs, frac_sec), reading by PPC    	(size = 8192*8 bytes)

-real time plots:
 	-full spectrum:
 '1_A2',                : (O) storage of the full spectrum of ADC0 for all the fft channels, real time plot  				(size = 8192*8 bytes)
 '1_B2',                : (O) storage of the full spectrum of ADC1 for all the fft channels, real time plot					(size = 8192*8 bytes)
 'AB_im',               : (O) storage of real part correlation for all the fft channels, real time plot    					(size = 8192*8 bytes)
 'AB_re',               : (O) storage of real part correlation for all the fft channels, real time plot                 	(size = 8192*8 bytes)

	-one channel:
 'addr2catch',          : (I) channel number that you want to save, it saves in powA, powB, phase to read in real time
						     It give the channel number to be storage in the powerPC
 'n_points',            : (I) number of points saved in the fpga memory to deploy the evolution in time of the channel.
 'mux_sel',             : (I) selects the type of counter used to give the address to the memories of the channel data.
							  set 0 to use a free running counter, so when the counter 


 'meas_rdy',            : (O) rise a 1 when the measurment is ready, to use with mux_sel in one, so you could reset the address counter
 'PowA',                : (O) memory that saves the power of the ADC0 at the channel given in addr2save  					(size = 8192*8 bytes)
 'PowB',                : (O) memory that saves the power of the ADC1 at the channel given in addr2save						(size = 8192*8 bytes)
 'phase',               : (O) memory that saves the real and imaginary part of the correlation of the channel
							  given in addr2catch. The data is interleaved, so the odd index correpond to the real
							  part and the even index correpond to the imaginary part.										(size = 8192*8*2 bytes)
 

-ADC oscillogram
 'snap_trig',           : (I) trigger to start the ADC measuring
 
 The following register are access by the corr function snapshot_get

 'adcsnap0_bram',       : (O) contains the data taken at the ADC0 
 'adcsnap0_ctrl',       : (I)
 'adcsnap0_status',     : (O) 
 'adcsnap1_bram',       : (O) contains the data taken at the ADC1
 'adcsnap1_ctrl',       : (I)
 'adcsnap1_status',     : (O)


-Irig registers

 'IRIG_1st_time',       : 
 'IRIG_bott_count',     : (I)
 'IRIG_cal',            : (I) enables the time calibration, should be put in zero and then in one to calibrate the system
 'IRIG_frec_downlim',   : (I) If the fraction of second counter has less than this value when a second has lapsed
							  the system rise a flag. To be clear, in one second the counter should have a value near 
							  the fpga clock. So it should be set to something like (1-error_threshold)*fpga_clock

 'IRIG_frec_uplim',     : (I) If the fraction of the second counter is higher than this value when a second has lapsed
							  the system rise a flag. Should be set to something like (1+error_threshold)*fpga_clock

 'IRIG_hrd_rst',        : (I) reset the whole system, should be used at the begining of the calibration to take the system
							  to known state.
 'IRIG_in_frame',       : (O) Rise a 1 if first value of the IRIG frame is detected
 'IRIG_index',          : (I) (For debbuging only) Gives the posibility to put the state machine in certain state

 'IRIG_irig_0',         : (I) Gives the duration of the 0 value of the IRIG code in cycles of the 
							  fpga, the manual set into 0.2*bit time. For our case (IRIGB000) the bit time is 0.01s
							  so it should be set to something like 0.01*0.2*fpga_clk*security_factor
							  where the security factor is given to not be so strict.
							  
 'IRIG_irig_1',         : (I) Gives the duration of the 1 value of IRIG code in cycles of the fpga
							  the manual set in 0.5*bit time. Should be set to 0.01*0.5*fpga_clk*sec_factor

 'IRIG_irig_pos_id',    : (I) Gives the duration of the position identifier value of the IRIG code in
							  cycles of the fpga, is important to detected the begining of the IRIG frame.
							  The manual set into 0.8* bit time, so should be set to something like
							   0.8*0.01*fpga_clk*sec_factor.

 'IRIG_lock_test',      : (O) Its a memory where you could store the fraction of second value when one second has
						      lapsed. Could be used to measure the variation of the timestamp.

 'IRIG_reg_wait',       : (I) Parameter for the debouncer, cycles that the input should remain in high to detected as a 1.
							  The reson behind this is that the GPIO present some some variation in the rising edge and
							  falling edge.

 'IRIG_sel_ind',        : (I) (For debbuging only) Gives the posibility to put a state machine in a given state.
 'IRIG_terminate',      : (O) Rise a 1 when the calibration of the timestamp is ready
 'IRIG_threshold',      : (I) Parameter for the debouncer, cycles that the input should remain in low to detected as 0.
 'IRIG_top_count',      : ()
 'IRIG_try_again',      : (I) Reset the counter that gives the address to lock_test. It also enables rise down the flag
							  in the unlock register. Usually at first second the fraction of second has a lower value 
							  so is good to reset the unlock at the begining.
							  
 'IRIG_waiting_in_vain',: (I)





 'acc_len',             : (I) set the accumulation number (related to the integration time)
 'adc0_delay',          : (I) set the delay of the ADC0 samples in order to be in phase with the 
						  samples of the ADC1 (used in the synchornization function)
 'adc1_delay',          : (I) set the delay of the ADC1 samples in order to be in phase with the 
						  samples of the ADC0 (used in the synchornization function)
 'cnt_rst',             : (I) set a 1 to restart the FFT and 0 to enable it.



 'frac_sec',            : 
 'full_mem0',           :
 'full_mem1',           :
 'lost_readings',       :
 'reading_data',        :
 'reading_data0',       :
 'reading_data1',       :
 'rst_save',            :
 'secs',                :
 'state',               :
 'sync_gen_sync',       :
 'sync_gen_sync_period_sel',:
 'sync_gen_sync_period_var',:
 'adc5g_controller',    : (I) internal register of the ADC gateway to the OPB bus
 'sys_board_id',        :
 'sys_clkcounter',      :
 'sys_rev',             :
 'sys_rev_rcs',         :
 'sys_scratchpad',      :
 'unlock']              :
    





        
